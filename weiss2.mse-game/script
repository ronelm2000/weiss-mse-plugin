numeric := filter_text@(match: "^[0123456789]+")
rarity	:= filter_text@(match: "^[CRU]+")
level_f := filter_text@(match: "^[0123]+")
auto_bold :=
{
	temp := input
	# Remove all size tags.
	input := temp
}
built_in_keyword_starters := [["Sunder / "], ["Bond / "], ["Backup "], ["Shift,"]]
built_in_keywords := [["Encore"], ["Accelerate"], ["Alarm"], ["Assist"], ["Great Performance"], ["Brainstorm"], ["Memory"], ["Experience"], ["Change"], ["Resonate"]]
card_font_size := 9
bold_font_size := card_font_size * 0.95
bold_font_size_open_sans := bold_font_size - 0.1

remove_kw :=
{
	if contains(input, match: "<i-keyword>") then
		"<sym-auto><i-keyword>" + remove_tags( filter_text(match: "<i-keyword>(.+)</i-keyword>", input) ) + "</i-keyword></sym-auto>"
	else
		"<sym-auto><i-keyword>" + input + "</i-keyword></sym-auto>"
}

color_to_word := [
	g: "green"
	r: "red"
	y: "yellow"
	b: "blue"
	p: "purple"
]

list_utils := [
	last: { input[length(input) - 1] }
	first: { input[0] }
	join: { substring( for each v in input do ((seperator+v) or else (seperator+v[0])), begin: length(seperator)) }@(seperator: ",")
]

str_utils := [
	starts_with: { substring(input, end: length(with)) == with }
]

map_utils := [
	keys: { [] + ( for each k:v in input do [k] ) }
]

card_utils := [
	notes: {
		#input: the in_context match
		#filter_text(match: "(bond)((\\w|\\s|[:punct:]|\\\\|:|\"|'|!|,|.)+)((\n)?)", in_context: "<match>", card.notes)
		initial_regex :=  "(" + regex_escape(input) + ": )"
		result := filter_text(match: initial_regex + "((\\w|\\s|:|\"|'|\\!|\\?|,|\\.)+)(\\n)", in_context: "<match>", card.notes)
		if (result == "") then
			result := filter_text(match: "(" + regex_escape(input) + ": )((\\w|\\s|:|\"|'|\\!|\\?|,|\\.)+)", in_context: "<match>", card.notes)
		result := replace(match: "^" + initial_regex, replace: "", result)
		result := replace(match: "(\\n)$", replace: "", result)
		result
		# filter_text(match: "((\\w|\\s|[:punct:])+)(?:[\n]?)", in_context: "<match>", input:card.notes)
	}
]

######################

#
# Reader Notes: Don't experience my pain. Start from the bottom going up.
#
json_start := "\{"
json_end := "\}"
json_array_start := "["
json_array_end := "]"

generate_english_numbers := { [["zero"]] + (for x from 1 to 30 do [[english_number(x)]]) }
english_numbers := generate_english_numbers()

#
# Construct the JSON map, tho it's mostly just going to be an array of cards anyway.
#

is_int := { to_int(input) or else false == input }
is_real := {  to_real(input) or else "wut" == input }
is_string := { input != [] and (to_string(input) or else -1 == input) }

is_primitive := {
	if to_int(input) or else false == input then (
		true
	)
	else if to_real(input) or else "wut" == input then (
		true
	)
	else if to_string(input) or else -1 == input then (
		true
	) else (
		false
	)
}

is_map := {
	result := false
	if is_primitive(input) then (
		result
	) else (
		for each k:v in input do (
			result := true
		)
	)
	result
}

is_list := {
	result := false
	if is_primitive(input) then (
		result
	)
	else if input == [] then (
		result := true
	)
	else (
		for each k:v in input do (
			result := result or ((to_int(k) or else -1) == k)
		)
	)
	result
}

to_json_row := {
	["\"{key}\": {to_json(value)}"]
}

to_map_json := {
	json_start
+	list_utils.join(for each k:v in input do to_json_row(key: k, value: v))
+	json_end
}

to_array_json := {
	json_array_start
+	(if (input != []) then list_utils.join(for each item in input do [to_json(item)]))
+	json_array_end
}

json_escape := {
	a := {input} +
		replace@(match: "\\\\", replace: "\\\\\\") +
		replace@(match: "\\\"", replace: "\\\\\"") +
		replace@(match: "\\t", replace: "\\\\t") +
		replace@(match: "\\r", replace: "\\\\r") +
		replace@(match: "\\n", replace: "\\\\n") +
		{input}
	a(input)
}

to_json := {
	if is_int(input) then
		to_int(input)
	else if is_real(input) then
		to_real(input)
	else if is_string(input) then
		"\"{ json_escape(input) }\""
	## Put JSON Extensions Here ##
	else if is_card(input) then
		to_map_json(to_map_from_card(input))
	else if is_set(input) then
		to_array_json(to_array_from_set(input))
	###
	else if is_list(input) then
		to_array_json(input)
	else if is_map(input) then
		to_map_json(input)
	else
		"\"{ json_escape(input) }\""
}

## Card JSON Extensions ##
is_card := {
	input.cardname or else "" != "" 
}

trigger_map := { # string input
	if input == "none" then				[]
	else if input == "off" then 		[]
	else if input == "c-soul" then 		["soul"]
	else  								[input] 
}

as_multilang_trait := { # string input
	if input == "" then
		[]
	else
		[[en: input]]
}

to_map_from_card := { # (card input)
	[ 	name: [en: input.cardname, jp: ""],
		serial: input.api_serial,
		traits: as_multilang_trait(input.trait_one) + as_multilang_trait(input.trait_two) + as_multilang_trait(input.trait_three),
		type: input.card_type,
		color: input.color,
		side: get_side(card: input),
		rarity: input.api_rarity,
		level: position(of: [input.level], in: english_numbers),
		cost: position(of: [input.cost], in: english_numbers),
		soul: position(of: [split_text(input.soul, match: " - ")[0]], in: english_numbers),
		power: to_int(input.power),
		triggers: trigger_map(input.trigger) + trigger_map(input.extra_trigger),
		flavor: sanitize_for_export(input.flavor_text),
		effect: split_text(sanitize_for_export(input.rules_text + (if input.replay_text != "" then ("\n" + input.replay_text) else "")), match: "\n")
	]
}

is_set := {
	input == set
}

to_array_from_set := { # (set input)
	[] + (for each card in set.cards do [card])
}

####### Sanitizers #######
sym_to_icons_array := [
	"C": "[CONT]",
	"A": "[AUTO]",
	"S": "[ACT]",
	"R": "[REPLAY]",
	"r": "[REST]",
	"v": "[REVERSE]",
	"s": "[STAND]",
	"1": "(1)",
	"2": "(2)",
	"3": "(3)",
	"4": "(4)",
	"5": "(5)",
	"6": "(6)",
	"7": "(7)",
	"<": "<<",
	">": ">>",
	"b": "[COUNTER]",
	"c": "[CLOCK]",
	"x": "[CXC]",
	"l": "[LINK]",
	"!": "[BOUNCE]",
	"@": "[BAG]",
	"#": "[BOOK]",
	"$": "[SHOT]",
	"%": "[DOOR]",
	"^": "[GATE]",
	"&": "[GOLD]",
	"*": "[STANDBY]",
	"(": "[CHOICE]",
	"+": "[SOUL]",
	"|": " ",
	"\n": " "
]

sym_to_icons := { # (character input)
	sym_to_icons_array[input] or else " "
}

filter_reminder := { input }
	+ tag_contents@(tag: "<atom", contents: remove_tags@()) 
	+ filter_text@(match: "(<atom[^>]*>)([^)]+[)])(</atom[^>]*>)")
	+ { " " + input }
	;

sanitize_for_export := { input } +
	# Remove Automated Tags
	remove_tag@(tag: "<sym-auto>") +
	remove_tag@(tag: "<i-auto>")   +
	remove_tag@(tag: "<b-auto>")   +
	remove_tag@(tag: "<error-spelling") +
	remove_tag@(tag: "<color") +
	remove_tag@(tag: "<size-auto") +
	remove_tag@(tag: "<font-auto") +
	remove_tag@(tag: "<font") +
	remove_tag@(tag: "<align") +
	
	# Remove <nospellcheck> special rules
	tag_contents@(tag: "<nospellcheck" contents: replace@(match:"<kw-A>|<kw-a>|<kw-1>", replace: "")) +
	remove_tag@(tag: "<nospellcheck") +
	
	# Replace special tags
	replace@(match: "<cost:([0-9]?)>", replace: "<cost:\\1><value:\\1></value:\\1>") +
	tag_contents@(tag: "<sym>", contents: {
		text_input := to_text(input)
		array := []
		for i from 1 to length(text_input) do
			array := array + [sym_to_icons(text_input[i-1])] 
		if array != [] then
			list_utils.join(array, seperator: " ")
		else
			""
	}) +
	tag_contents@(tag: "<cost" contents: {
		get_cost := 	filter_text@(match: "<value:(\\d*)>") 
					+	filter_text@(match: "(\\d)")
					+	to_int@()
		cost := get_cost(input)
		"({ cost })"
	}) +
	tag_contents@(tag: "<kw", contents: filter_reminder) +
	tag_contents@(tag: "<replay>", contents: { "\{{ input }\}" }) +
	tag_contents@(tag: "<hidden", contents: { "" }) +
	
	# Remove special tags
	remove_tag@(tag: "<kw") +
	remove_tag@(tag: "<atom") +
	remove_tag@(tag: "<replay>") +
	remove_tag@(tag: "<sym>") +
	remove_tag@(tag: "<value") +
	remove_tag@(tag: "<cost") +
	remove_tag@(tag: "<hidden") +
	remove_tag@(tag: "<greek>") +
	remove_tag@(tag: "<jp>") +
	
	# Remove other tags
	remove_tag@(tag: "<b") +
	remove_tag@(tag: "<i") +
	remove_tag@(tag: "<customita>") +
	remove_tag@(tag: "<soft") + 
	remove_tag@(tag: "<size") +
	remove_tag@(tag: "<") +
	remove_tags@() + 
	
	# Remove double spaces
	replace@(match: "  ", replace: " ") +
	
	{ input }
	;

sanitize_for_filename := { input } +
	replace@(match: "/|-", replace: "_") +
	{ input }
	;
	
#####################

sp_auto_fix :=
	remove_tag@(tag: "<color")

auto_fix := 
	# Add Keywords
	# step 1 : remove all automatic tags
	{
		if (length(remove_tags(input)) < 1) then
			""
		else
			input
	} +
	remove_tag@(tag: "<sym-auto>") +
	remove_tag@(tag: "<i-auto>")   +
	remove_tag@(tag: "<b-auto>")   +
	remove_tag@(tag: "<error-spelling") +
	remove_tag@(tag: "<nospellcheck") +
	remove_tag@(tag: "<color") +
	remove_tag@(tag: "<size-auto") +
	remove_tag@(tag: "<font-auto") +
	remove_tag@(tag: "<font") +
	remove_tag@(tag: "<align") +
	remove_tag@(tag: "<value") +
	
	# Step 0: Only use in emergencies
	{
		if (set.nuke_magic_text == "yes" or styling.nuke_magic_text == "yes") then
			(	
				remove_tag@(tag: "<sym>")
			)(input)
		else
			input
	} +
	
	# step 2 : reminder text for keywords
	# before: not contains(card.rules_text, match: "<i-keyword>") // and not used_placeholders
	expand_keywords@(
		condition: { correct_case and not used_placeholders  }, 
		default_expand: { true },
		combine: {
			keyword  := "<nospellcheck>{keyword}</nospellcheck>"
		#	reminder := process_english_hints(reminder)
			if mode == "trigger" then "<i>({reminder})</i>"
			#	else "<i>(</i><hidden>.</hidden><i>{reminder})</i>"
			else if mode == "cx_generics" then "{reminder}"
			else if mode == "reminder" then (
				if expand then (
					if (length(filter_text(match: "finalize_reminders", card.notes)) > 0) then
						"<atom-remindtext><i>({reminder})</i></atom-remindtext>"
					else
						"<color-auto:rgba(0,0,0,0)><size-auto:1><font-auto:Small Fonts>{keyword}</font-auto></size-auto></color-auto><atom-reminder-{mode}><i>({reminder})</i></atom-reminder-{mode}>"
				)
				else
					"{keyword}"
			)
			else if mode == "symbol_shortcut" then "<sym>{reminder}</sym>"
			else if mode == "rule_shortcut" then "{reminder}"
			else "<atom-reminder-{mode}><i-auto>({reminder})</i-auto></atom-reminder-{mode}>"	
		#	else keyword + if expand then "<atom-reminder-{mode}> ({reminder})</atom-reminder-{mode}>"
		}
		) +
	# step 2b : move action keywords' reminder text to the end of the line
	replace@(
		match: "(<atom-reminder-action>(?:(?!<kw-).)*</atom-reminder-action></kw[^>]*>)(((?!<atom-reminder| ?<kw-)[^\n(])+)",
		replace: "\\2\\1"
		) +
		
	# step 2c : remove duplicate reminder text
#	replace@(
#		match: "(<atom-reminder-[^>]*>[^)]+[)]</atom-reminder-[^>]*>)([^\n]+)\\1",
#		replace: "\\2\\1"
#		)  +
		
	# step 2d: Add Support for Replay Text
	replace@(
		match: "(``)([\\d\\s\\w\\'\\!\\@\\#\\$\\%\\^\\&\\*\\(\\)]+)(``)",
		replace: "<replay>\\2</replay>"
	) +
	tag_contents@(tag: "<replay>", contents: { "<b-auto><color:rgba(225,25,25,255)>{ input }</color></b-auto>" }) +
	
	# step 3d: Add support for some special fonts
	tag_contents@(tag: "<greek>", contents: { "<font-auto:Arial>{ input }</font-auto>" })+
	tag_contents@(tag: "<jp>", contents: { "<font-auto:Meiryo><size-auto:7.4>{ input }</size-auto></font-auto>" })+

		
	# step 3: revert back <kw-a>
	#tag_contents@(
	#	tag: "<kw-a>"
	#	contents: remove_kw
	#) +
	#remove_tag@(tag: "<kw-a>") +
		
	# Step 3: Add color and size
	# TODO: Do not apply this if the language is japanese, I guess? But right now there's no support for JP cards.
	replace@(match: "《|(\<\<\<)", replace: "«") +
	replace@(match: "》|(>>>)", replace: "»") +
	replace@(match: "»|«", replace: "<font-auto:MS Reference Sans Serif>\\0</font-auto>") + 
	#replace@(match: "", replace: "<size-auto:9.3><font-auto:MS Reference Sans Serif>\\0</font-auto></size-auto>") +
	#replace@(match: "<i>", replace: "<size:8.9><color:rgba(33,33,33,200)>\\0") +
	#replace@(match: "</i>", replace: "\\0<color:card.rules_text.color><size: 9.7>") +
	#replace@(match: "<b>", replace: "<size-auto:8.9><color-auto:rgba(0,0,0,240)>\\0") + 		# default font: 9.4
	#replace@(match: "</b>", replace: "\\0</color></size>")
	#tag_contents@(tag: "<i", contents: { "<size:8.8>" + input + "</size>" }) +
	
	tag_contents@(tag: "<b", contents: { "<size-auto:{bold_font_size}>{input}</size-auto>" } + replace@(match: "[0-1]+", replace: { "</size-auto><size-auto:{bold_font_size_open_sans}><font-auto:Open Sans Bold>{input}</font-auto></size-auto><size-auto:{bold_font_size}>" })) +	
	tag_contents@(tag: "<hidden>", contents: { "<color:rgba(0,0,0,0)>" + input + "</color>" }) +
	tag_contents@(tag: "<i", contents: { "<color:{rules_text_italic_font_color}>{input}</color>" }) +
	
	# Step 4: Add Wingdings						
	replace@(match: "\\((\\d*)\\)", replace: "<atom-cost><cost:\\1></cost:\\1></atom-cost>") +
	replace@(match: "<cost:(\\d*)>", replace: "<cost:\\1><value:\\1></value:\\1>") +
	tag_contents@(tag: "<cost" contents: {
		get_cost := 	filter_text@(match: "<value:(\\d*)>") 
					+	filter_text@(match: "\\d")
					+	to_int@()
		cost := get_cost(input) 
		cost_map := "①②③④⑤⑥⑦⑧⑨⑩⑪⑫⑬⑭⑮⑯⑰⑱⑲⑳"
		(
		if (cost > 0) then
			("<font-auto:Meiryo><size-auto:8>" + cost_map[cost - 1] + "</size-auto></font-auto>")
		else
			""
		)
	}) +
	# tag_contents@(tag: "<font:Wingdings 2>", contents: { "<size-auto:11>" + input + "</size-auto>" }) +

	
	{ input }
	
	# it was 8.95 over 9.2
	# Step 4: Debug Commands
	# + trace@()

import_benitez_name_text := { input } 
	+ {
		if (import != "" and input == "") then
			import
		else
			input
	}

auto_italic :=
{
	input := replace(to_text(input),match: "[abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789\\.\\!\\?]", replace: "<i>\\0</i>")
}

using_sp_override :=
{
	if styling.sp_override then
		true
	else if filter_text(match: "(\\w+)", in_context:"SP override: <match>", input:card.notes) == "true" then
		true
	else if card.rarity == "SP" or card.rarity == "SSP" then
		true
	else
		false
}

card_colored_level :=
{
	if level != 0 then 
		input := "level/" + color[0] + "l" + to_string(level) + ".png"
	else 
		input := "level/l0.png"
}

is_soul_legacy := {
	length(split_text(soul, match: " - ")) > 1
}

card_colored_soul :=
{
	soul_pair := split_text(soul, match: " - ")
	fixed_soul := soul_pair[0]
	if soul == "zero" then
		input := "character/{get_side()}/{color}.png"
	else (
		input := masked_blend(light: "character/{get_side()}/{color}.png", 
			dark: "souls/" + position(of: [fixed_soul], in: english_numbers) + "s.png", 
			mask: "souls/" + position(of: [fixed_soul], in: english_numbers) + "s_mask.png"
			)
	)
}

overridable_set_id := {
	if styling.set_override != "" then
		styling.set_override
	else
		set.set_id
}

find_card := {
	cid := remove_tags(input)
	result := nil
	for each c in filter_list(set, filter: { card_id(card: input) == cid }) do
		result := c
	result
}

card_serial := 
{
	if card.rarity == "PR"
	then
		input := overridable_set_id() + "/" + set.subset_id + "-" + "PE" + to_string(pr_card_number(), format: ".2d") + " " + rarity_or_override_rarity(next_func: rarity_or_copy)
	else if card.rarity == "(Alternate Art)" and rarity_or_copy() == "PR"
	then
		input := overridable_set_id() + "/" + set.subset_id + "-" + "PE" + to_string(alt_pr_card_number(), format: ".2d") + " " + rarity_or_override_rarity(next_func: rarity_or_copy)
	else if card.rarity == "TD"
	then
		input := overridable_set_id() + "/" + set.subset_id + "-TE" + to_string(td_card_number(), format: ".2d") + " " + rarity_or_override_rarity(next_func: rarity_or_copy)
	else if is_foil_or_alt_art(x: card) and rarity_or_copy() == "TD"
	then
		input := overridable_set_id() + "/" + set.subset_id + "-TE" + to_string(alt_td_card_number(), format: ".2d") + foil_shortcut() + " " + rarity_or_override_rarity(next_func: rarity_or_copy)
	else
		input := overridable_set_id() + "/" + set.subset_id + "-E" + to_string(card_number(), format: ".3d") + foil_shortcut() + " " + rarity_or_override_rarity(next_func: rarity_or_copy)
}

card_serial_no_rarity := 
{
	if card.rarity == "PR"
	then
		input := overridable_set_id() + "/" + set.subset_id + "-" + "PE" + to_string(pr_card_number(), format: ".2d")
	else if card.rarity == "(Alternate Art)" and rarity_or_copy() == "PR"
	then
		input := overridable_set_id() + "/" + set.subset_id + "-" + "PE" + to_string(alt_pr_card_number(), format: ".2d")
	else if card.rarity == "TD"
	then
		input := overridable_set_id() + "/" + set.subset_id + "-TE" + to_string(td_card_number(), format: ".2d")
	else if is_foil_or_alt_art(x: card) and rarity_or_copy() == "TD"
	then
		input := overridable_set_id() + "/" + set.subset_id + "-TE" + to_string(alt_td_card_number(), format: ".2d") + foil_shortcut()
	else
		input := overridable_set_id() + "/" + set.subset_id + "-E" + to_string(card_number(), format: ".3d") + foil_shortcut()
}

card_id := 
{
	if card.rarity == "PR"
	then
		input := "PE" + to_string(pr_card_number(), format: ".2d")
	else if card.rarity == "(Alternate Art)" and rarity_or_copy() == "PR"
	then
		input := "PE" + to_string(alt_pr_card_number(), format: ".2d")
	else if card.rarity == "TD"
	then
		input := "TE" + to_string(td_card_number(), format: ".2d")
	else if is_foil_or_alt_art(x: card) and rarity_or_copy() == "TD"
	then
		input := "TE" + to_string(alt_td_card_number(), format: ".2d") + foil_shortcut()
	else
		input := "E" + to_string(card_number(), format: ".3d") + foil_shortcut()
}

rarity :=
{
	input := rarity_or_override_rarity(next_func: rarity_or_copy)
}

foil_shortcut :=
{
	if length(styling.foil_shortcut_override) > 0 then
		styling.foil_shortcut_override
	else if card.rarity == "SP" or card.rarity == "SSP" then
		rarity_or_override_rarity(next_func: { card.rarity })
	else if card.rarity == "RRR" then
		"R"
	else if card.rarity == "SR" then
		"S"
	else
		""
}

rarity_or_override_rarity :=
{
	if length(styling.rarity_override) > 0 then
		styling.rarity_override
	else
		next_func()
}

alt_pr_card_number :=
{
	pr_card_number(card: find_original_card(card))
}

alt_td_card_number :=
{
	td_card_number(card: find_original_card(card))
}

rarity_or_copy := 
{
	if (is_foil_or_alt_art(x: card)) then # and card.rarity == "(Alternate Art)" ) then
	{
		original_card := find_original_card(card)
		if (original_card.rarity == "TD" or original_card.rarity == "PR") then
			result := original_card.rarity
		else if (card.rarity == "(Alternate Art)") then
			result := original_card.rarity
		else
			result := card.rarity
		#for each found_card in filter_list (set, filter: { (not is_foil_or_alt_art(x: input)) and input.cardname == card.cardname and using_alt_override() }) do
		#	found_card.rarity
		result
	}()
	else
		card.rarity
}

find_original_card :=
{
	found_card_list := []
	for each found_card in filter_list (set, filter: { (not is_foil_or_alt_art(x: input)) and input.cardname == card.cardname and using_alt_override() }) do
		found_card_list := [found_card]
	list_utils.last(found_card_list) or else card
}

pr_card_number :=
{
	position (
		of: card
		in: set
		order_by: { td_pr_main_sort() }
		filter: { card.rarity == "PR" }
		) + 1
}

td_card_number :=
{	
	position (
		of: card
		in: set
		order_by: { td_pr_main_sort() }
		filter: { card.rarity == "TD" }
		) + 1
}

td_pr_main_sort := {
	override_sort() + 
	wave_id_sort() + 
	color_sort() + 
	type_sort() + 
	rarity_sort() + 
	level_sort() + 
	name_sort(card.cardname)
}

wave_id_sort := {
	if length(styling.wave_id) <= 0 then
		"00000"
	else
		styling.wave_id
}

override_sort :=
{
	if length(styling.serial_override) > 0 then
		styling.serial_override
	else
		filter_text(match: "(\\w+)", in_context:"override sort: <match>", input:card.notes)
}

alt_art_override :=
{
	if length(styling.alt_art_override) > 0 then
		styling.alt_art_override
	else
		filter_text(match: "(\\w+)", in_context:"alt art override: <match>", input:card.notes)
}

using_alt_override :=
{
	if alt_art_override() == "" or contains(input.serial, match: alt_art_override()) then true
	else false
}

alt_art_number :=
{
	original_card := find_original_card(card)
	result := position (
		of: original_card
		in: set
		order_by: {	main_sort() }
		filter: 
		{
			card.rarity == "RR+" or
			card.rarity == "RR" or
			card.rarity == "R" or
			card.rarity == "U" or
			card.rarity == "C" or
			card.rarity == "CC" or
			card.rarity == "CR"
		}
	) + 1
}

alt_art_number_old :=
{
	for each found_value in filter_list (set, filter: { (not is_foil_or_alt_art(x: input)) and input.cardname == card.cardname and using_alt_override() })
	do
	    result := position (
		of: found_value
		in: set
		order_by: {	main_sort() }
		filter: 
		{
			card.rarity == "RR+" or
			card.rarity == "RR" or
			card.rarity == "R" or
			card.rarity == "U" or
			card.rarity == "C" or
			card.rarity == "CC" or
			card.rarity == "CR"
		}
		) + 1
}

is_foil_or_alt_art :=
{
	x.rarity == "SP" 
	or x.rarity == "SSP" 
	or x.rarity == "RRR" 
	or x.rarity == "SR" 
	or x.rarity == "(Alternate Art)"
}

is_pr_or_td :=
{
	if x.rarity == "TD" or x.rarity == "PR"
	then true
	else false
}

is_using_legacy_card_image :=
{
	if length(styling.legacy_card_image_override) > 0 then
		styling.legacy_card_image_override == "true"
	else
		set.is_using_legacy_card_images
}

level_sort := {
	if card.level == "zero" then "000"
	else if card.level == "one" then "001"
	else if card.level == "two" then "002"
	else if card.level == "three" then "003"
	else "004"
}
cost_sort := {
	if card.cost == "zero" then "000"
	else if card.cost == "one" then "001"
	else if card.cost == "two" then "002"
	else if card.cost == "three" then "003"
	else if card.cost == "four" then "004"
	else if card.cost == "five" then "005"
	else if card.cost == "six" then "006"
	else if card.cost == "seven" then "007"
	else if card.cost == "eight" then "008"
	else if card.cost == "nine" then "009"
	else if card.cost == "ten" then "010"
	else if card.cost == "eleven" then "011"
	else if card.cost == "twelve" then "012"
	else if card.cost == "thirteen" then "013"
	else if card.cost == "fourteen" then "014"
	else if card.cost == "fifteen" then "015"
	else if card.cost == "twenty" then "020"
	else "999"
}

card_number :=
{
	if is_foil_or_alt_art(x: card)
	then
	    alt_art_number()
	else
	    position (
		of: card
		in: set
		order_by: { main_sort() }
		filter: 
		{	card.rarity == "RR+" or
			card.rarity == "RR" or
			card.rarity == "R" or
			card.rarity == "U" or
			card.rarity == "C" or
			card.rarity == "CC" or
			card.rarity == "CR"
		}
		) + 1
}

color_sort :=
{
	if card.color == "yellow" 		then "A"
	else if card.color == "green" 	then "B"
	else if card.color == "red"		then "C"
	else if card.color == "blue" 	then "D"
	else if card.color == "purple" 	then "E"
	else "F"
}

rarity_sort :=
{
	if card.rarity == "RR+" then "A"
	else if card.rarity == "RR" then "B"
	else if card.rarity == "R" then "C"
	else if card.rarity == "U" then "D"
	else if card.rarity == "C" then "E"
	else if card.rarity == "CR" then "F"
	else if card.rarity == "CC" then "G"
	else "H"
}

type_sort :=
{
	if card.card_type == "character" then "A"
	else if card.card_type == "event" then "B"
	else if card.card_type == "climax" then "C"
	else "D"
}

name_sort :=
	{ input }
		# Remove "The", "A", and "And" at the beginning
		+ replace@(match: "^(The|An?) ", replace: "")
		# Remove commas and apostrophes
		+ replace@(match: "(,|'|’)", replace: "")
		# Remove bold and italic tags
		+ replace@(match: "(<b>|<i>|</b>|</i>)", replace: "") 
		# Make lowercase
		+ to_lower
		# Replace all numbers with capital letters as number sorting is somehow broken in MSE2 (it sorts numbers last instead of letters.)
		+ replace@(match: "(0)", replace: "A")
		+ replace@(match: "(1)", replace: "B")
		+ replace@(match: "(2)", replace: "C")
		+ replace@(match: "(3)", replace: "D")
		+ replace@(match: "(4)", replace: "E")
		+ replace@(match: "(5)", replace: "F")
		+ replace@(match: "(6)", replace: "G")
		+ replace@(match: "(7)", replace: "H")
		+ replace@(match: "(8)", replace: "I")
		+ replace@(match: "(9)", replace: "J")
		+ replace@(match: "(9)", replace: "K")

main_sort := 
{
		override_sort() 
		+ 	color_sort()
		+	type_sort()
		+	rarity_sort()
		+	level_sort()
		+	cost_sort()
		+	(to_string(card.power,format: "010d") or else "0000")
		+ 	name_sort(card.cardname)			
		#+ 	to_string(sort_name(card.cardname))
}

line_height := 15.25

card_name_sizing := 
{
	if length(card.cardname) < 28 then
		[
			size: 15
		,	top_adjustment: 1
		]
	else if length(card.cardname) < 38 then
		[
			size: 13
		,	top_adjustment: 3
		]
	else if length(card.cardname) < 48 then
		[
			size: 11
		,	top_adjustment: 4
		]
	else
		[
			size: 09
		,	top_adjustment: 5
		]
}

ceil :=
{
	if input > to_int(input) then to_int(input) +1
	else input
}
card_climax_rules_height :=
{
	card_style.climax_rules_text.content_height or else set.stylesheet.card_style.climax_rules_text.content_height
}
card_climax_flavor_height :=
{
	card_style.climax_flavor_text.content_height or else set.stylesheet.card_style.climax_flavor_text.content_height
}
flavor_bottom :=
{
	if event then flavor_event(height: height, rules: rules)
	else flavor_chara(height: height, rules: rules)
}
flavor_event :=
{
	if rules then 547 - height
	else 557
}
flavor_chara :=
{
	if rules then 532 - height
	else 547
}
card_color_bar :=
{
	if contains(card.rarity, match: "SP") or using_sp_override() then
		input := "bars/SP_Blur/" + card.color + "bar.png"
	else if contains(card.color, match: " - ") then
		input := "bars/yellowbar.png"
	else
		input := "bars/" + card.color + "bar.png"
}
card_jp_name_color_bar := {
	"bars/jp_name_bar/" + bar_type + "/" + card.color + ".png"
}

white_color_bar :=
{
	if contains(card.rarity, match: "SP") or using_sp_override() then
		input := "bars/SP_Blur/whitebar.png"
	else
		input := "bars/whitebar.png"
}

climax_and_character_colored_card :=
{
	if contains(card.color, match: " - ") then input := card.card_type + "/" + get_side() + "/yellow.png"
	else if type == "character" then input := card_colored_soul(soul: soul, color: color)
	else if type == "climax" then input := "climax/" + get_side() + "/"  + color + ".png"
	else if type == "event" then input := "event/" + get_side() + "/" + color + ".png"
	else input := ""
}

sp_shadow :=
{
	if (contains(card.rarity, match: "SP")) then
		rgb(255,255,255)
	else
		rgba(0,0,0,0)
}

get_side :=
{
	if styling.side_override == "default" then
		set.side
	else
		styling.side_override
}

absolute_position := {
	position (
		of: card
		in: set
	)
}

##########
# Warnings
##########

find_card_warnings := {
	if contains(card.color, match: " - ") and set.benitez_migration == "no" then
		input := "yes"
	else if is_soul_legacy(soul:card.soul) then
		input := "yes"
	else
		input := "no"
}

benitez_fork_warning := {
	"Benitez fork has been detected, and the following data has been lost.\n" +
	"If you wish to continue, check the following data for each card and reassign/check them.\n" +
	"- Soul\n" +
	"- Color\n" +
	"- Keyword Symbols in Rules Text\n" +
	"\n" +
	"If you're using the JP name text box, you can re-enable it by going to Styles and changing the card meta type to \"JP Import\". \n" +
	"JP names should be imported successfully this way."
}

if (length(filter_list(set, filter: { contains(input.color, match: " - ") })) > 0 and set.benitez_migration == "no") then (
	warning(benitez_fork_warning())
	benitez_fork_warning_flag := true
)
if (length(filter_list(set, filter: { is_soul_legacy(soul:input.soul) })) > 0 and set.old_soul_values == "no") then (
	warning(
		"Detected cards whose Soul value is deprecated and will be removed in future versions.\n" +
		"Please double-check for any cards and ensure all of them only contain: zero, one, two, and three."
		)
)
